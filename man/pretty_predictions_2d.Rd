% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pretty_preds.R
\name{pretty_predictions_2d}
\alias{pretty_predictions_2d}
\title{Pretty two-dimensional predictions}
\usage{
pretty_predictions_2d(
  x,
  view = NULL,
  n_grid = 30,
  cond = list(),
  predict_param = list(),
  select = "fit",
  xlim = NULL,
  ylim = NULL,
  zlim = NULL,
  xlab = NULL,
  ylab = NULL,
  pretty_axis_args = list(side = 1:4, axis = list(list(), list(), list(labels = FALSE),
    list(labels = FALSE))),
  col_pal = viridis::viridis,
  col_n = 100,
  add_xy = NULL,
  add_rug_x = NULL,
  add_rug_y = NULL,
  add_contour = NULL,
  add_legend = NULL,
  legend_breaks = NULL,
  legend_labels = NULL,
  legend_x = NULL,
  legend_y = NULL,
  ...
)
}
\arguments{
\item{x}{A model (e.g. an output from \code{\link[mgcv]{gam}}).}

\item{view}{A character vector of two variables that define the variables on the x and y axis.}

\item{n_grid, cond, predict_param, select}{Prediction controls.
\itemize{
  \item \code{n_grid} is an integer that defines the resolution of the surface (in both x and y directions).
  \item \code{cond} (optional) is a named list that defines the values of other predictors (i.e., those not in \code{view}) for which to make predictions. If un-supplied, factor variables are set at the most commonly occuring factor level and continuous variables are set at the closest observed value to the median.
  \item \code{predict_param} (optional) A named list of arguments, passed to \code{\link[stats]{predict}}, to customise predictions.
  \item \code{select} (optional) If the call to \code{\link[stats]{predict}} returns a list, \code{select} is the name of the element in that list that is plotted (e.g., \code{"fit"} or \code{"se.fit"}). If the call to \code{\link[stats]{predict}} returns a numeric vector, this is ignored.
}}

\item{xlim, ylim, zlim}{Axis limits.}

\item{xlab, ylab}{X and y axis labels.}

\item{pretty_axis_args}{A named list of arguments, passed to \code{\link[prettyGraphics]{pretty_axis}}, to control axes.}

\item{col_pal, col_n}{Colour controls.
\itemize{
  \item \code{col_pal} is a colour palette function from which colours are drawn.
  \item \code{col_n} is the number of colours to use in the colour scheme.
}}

\item{add_xy}{A named list of arguments, passed to \code{\link[graphics]{points}}, to add observations to the plot. \code{add_xy = NULL} suppresses this option, \code{add_xy = list()} implements default arguments and a named list customises these.}

\item{add_rug_x, add_rug_y}{Named list of arguments, passed to \code{\link[graphics]{rug}}, to add observed values of the variables defined in \code{view} to the plot. \code{add_rug_* = NULL} suppresses this option, \code{add_rug_*} implements default arguments and a named list customises these.}

\item{add_contour}{A named list of arguments, passed to \code{\link[graphics]{contour}}, to add contour lines to the plot. \code{add_contour = NULL} suppresses this option, \code{add_contour = list()} implements default arguments and a named list customises these.}

\item{add_legend, legend_breaks, legend_labels, legend_x, legend_y}{Legend controls.
\itemize{
  \item \code{add_legend} A named list of arguments, passed to \code{\link[prettyGraphics]{add_colour_bar}}, to add a legend to the plot. \code{add_legend = NULL} suppresses this option, \code{add_legend = list()} implements default arguments and a named list customises these.
  \item \code{legend_breaks} and \code{legend_labels} are functions that modify the legend breaks and legend labels respectively.
  \item \code{legend_x} and \code{legend_y} are numeric vectors of length two that specify the x and y positions, on the current plot, for the four corners of the legend. If un-supplied, the two \code{legend_x} coordinates are taken as the maximum x limit of x plus (a) 1 per cent and (b) 10 per cent of the difference between the maximum and minimum x limits. \code{legend_y} is taken from \code{ylim}.
}}

\item{...}{Additional arguments passed to \code{\link[graphics]{image}}, which is used for plotting (excluding \code{col}, \code{breaks} and \code{axes} which are defined internally).}
}
\value{
The function returns a contour plot of the predictions of a model for the two variables defined in \code{view} and, invisibly, a named list containing the prediction matrix (`z') and the list of pretty axis parameters produced by \code{\link[prettyGraphics]{pretty_axis}} (`axis_ls').
}
\description{
This is function plots pretty two-dimensional predictions from a statistical model.
}
\details{
This function was motivated by \code{\link[mgcv]{vis.gam}} (see also \code{\link[prettyGraphics]{pretty_smooth_2d}}).
}
\examples{
#### Simulate example data and fit model (following ?mgcv::vis.gam examples)
set.seed(0)
n    <- 200
sig2 <- 4
x0   <- runif(n, 0, 1)
x1   <- runif(n, 0, 1)
x2   <- runif(n, 0, 1)
y    <- x0^2 + x1 * x2 + runif(n, -0.3, 0.3)
g    <- mgcv::gam(y ~ s(x0, x1, x2))

#### Example (1): Contour plot using default options
pp <- par(oma = c(2, 2, 2, 10))
pretty_predictions_2d(g, view = c("x1", "x2"))

#### Example (2): Customise predictions
# Use n_grid to control the grid resolution
pretty_predictions_2d(g, view = c("x1", "x2"), n_grid = 10)
# Use cond to set other variables at specific values
pretty_predictions_2d(g, view = c("x1", "x2"), cond = list(x0 = mean(x0)))
# Use predict_param for further control, e.g., to plot SEs
pretty_predictions_2d(g, view = c("x1", "x2"),
                      predict_param = list(se.fit = TRUE), select = "se.fit")

#### Example (3): Customise colours
# Use col_pal and col_n
pretty_predictions_2d(g, view = c("x1", "x2"),
                      col_pal = grDevices::heat.colors,
                      col_n = 10)
pretty_predictions_2d(g, view = c("x1", "x2"),
                      col_pal = grDevices::heat.colors,
                      col_n = 100)

#### Example (4): Customise axes via xlim, ylim and pretty_axis_args
# Use xlim and ylim
pretty_predictions_2d(g, view = c("x1", "x2"),
                      xlim = c(0, 1),
                      ylim = c(0, 1))
# Use pretty_axis_args
pretty_predictions_2d(g, view = c("x1", "x2"),
                      pretty_axis_args = list(side = 1:4))

#### Example (5): Add observed data
# Specify list() to use default options
pretty_predictions_2d(g, view = c("x1", "x2"),
                      add_xy = list())
# Customise addition of observed data
pretty_predictions_2d(g, view = c("x1", "x2"),
                      add_xy = list(pch = ".'", cex = 5))

#### Example (6): Add rugs for the x and y variables
# Use default options
pretty_predictions_2d(g, view = c("x1", "x2"),
                      add_rug_x = list(),
                      add_rug_y = list())
# Customise options
pretty_predictions_2d(g, view = c("x1", "x2"),
                      add_rug_x = list(col = "grey"),
                      add_rug_y = list(col = "grey"))

#### Example (7): Add contours
# Use default options
pretty_predictions_2d(g, view = c("x1", "x2"),
                      add_contour = list())
# Customise contours
pretty_predictions_2d(g, view = c("x1", "x2"),
                      add_contour = list(labcex = 1.5))

#### Example (8): Add add_colour_bar()
# Use default options
pp <- graphics::par(oma = c(2, 2, 2, 10))
pretty_predictions_2d(g,
                      view = c("x1", "x2"),
                      add_contour = list(labcex = 1.5),
                      add_legend = list())
graphics::par(pp)
# Customise colour bar
pp <- graphics::par(oma = c(2, 2, 2, 10))
pretty_predictions_2d(g,
                      view = c("x1", "x2"),
                      add_contour = list(labcex = 1.5),
                      zlim = c(-1, 2), add_legend = list())
graphics::par(pp)
# E.g., reverse the colour scheme and legend
# ... This is useful if, for example, the surface represents the depth of an
# ... animal, in which case it is natural to have shallower depths near the
# ... top of the legend.
pp <- graphics::par(oma = c(2, 2, 2, 10))
pretty_predictions_2d(g, view = c("x1", "x2"),
                      col_pal = function(n) rev(viridis::viridis(n)),
                      add_contour = list(labcex = 1.5),
                      add_legend = list(),
                      legend_breaks = function(x) x *-1,
                      legend_labels = abs)
graphics::par(pp)

}
\seealso{
\code{\link[prettyGraphics]{pretty_predictions_1d}}
}
\author{
Edward Lavender
}
