% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_lagging_point_zero.R
\name{add_lagging_point_zero}
\alias{add_lagging_point_zero}
\title{Add lagging .0(s) to a number}
\usage{
add_lagging_point_zero(x, n = NULL, ignore = FALSE)
}
\arguments{
\item{x}{A numeric or character vector which contains some elements to which lagging .0(s) should be added.}

\item{n}{A number which defines the desired number of decimal places. Any element in \code{x} with fewer than \code{n} decimal places will have the appropriate number of decimal places added. If \code{n} is less than the number of decimal places for any element in \code{x}, the function will return an error. In this case, round all numbers to the same precision first, before implementing \code{\link[prettyGraphics]{add_lagging_point_zero}}. If \code{n = NULL}, the function defines \code{n} internally to be the maximum number of decimal places in \code{x}.}

\item{ignore}{A logical input which specifies whether or not, under the condition that no number has any decimal places, the \code{n} argument should be ignored (i.e. if \code{TRUE}, the input vector, \code{x}, is simply returned without any adjustments).}
}
\value{
A vector, as inputted, but in which any elements with fewer than \code{n} decimal places have had ".0"(s) added.
}
\description{
This function adds lagging .0(s) to a number. This is useful for tidy graph labels. This is implemented internally in \code{\link[prettyGraphics]{pretty_axis}}.
}
\details{
This function is not designed to work with scientific notation. Digits for scientific notation can be controlled via \code{\link[prettyGraphics]{sci_notation}}.
}
\examples{
#### Example (1): Bring all numbers up to the same number of decimal places
# Use maximum number of decimal places of any one number (i.e., default n specification):
add_lagging_point_zero(c(0.01, 0.002))
# Specify desired number of decimal places
add_lagging_point_zero(c(0.01, 0.002), n = 4)

#### Example (2): More examples
add_lagging_point_zero(seq(0, 1000, by = 100), 1)
add_lagging_point_zero(c(50.123, 1000, 150, 2000), 3)
add_lagging_point_zero(c(50.0, 1000, 150, 2000), 1)

#### Example (3): the ignore argument returns an unchanged character vector if no numbers
# ... in the vector have decimal places
add_lagging_point_zero(seq(0.1, 1000, by = 100), 2, ignore = TRUE) # decimal places added
add_lagging_point_zero(seq(0, 1000, by = 100), 2, ignore = TRUE)   # decimal places not added

#### Example (3): Using add_lagging_point_zero() for prettier axis labels
# Numeric vector input
# Define some data/axis positions
at <- seq(0, 1, by = 0.2) * 10^5
# Plot graph
graphics::plot(at, at, axes = FALSE)

# Labels before add_lagging_point_zero():
labels1 <- at/10^5; labels1
as.character(labels1) # the .0 disappears from 0 and 1 when coerced to a character (see graph)

# Labels after add_lagging_point_zero():
labels2 <- add_lagging_point_zero(labels1, n = 1); labels2
as.character(labels2)

# Labels before add_lagging_point_zero() are varying numbers of decimal places:
axis(side = 1, at, labels = labels1)

# Labels after before add_lagging_point_zero() are tidier:
axis(side = 2, at, labels = labels2)

#### Example (4): add_lagging_point_zero() is not designed to work with scientific notation
# ... Use sci_notation() instead:
add_lagging_point_zero(1e9, n = 2)
sci_notation(1e9, digits = 2)

}
\author{
Edward Lavender
}
