% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pi_notation.R
\name{pi_notation}
\alias{pi_notation}
\title{\eqn{\pi} notation}
\usage{
pi_notation(x, as_fraction = TRUE, as_bar = TRUE, ...)
}
\arguments{
\item{x}{A numeric vector.}

\item{as_fraction}{A logical value that defines whether or not to express sequential multipliers of \eqn{\pi} as fractions (\code{TRUE}) or decimals (\code{FALSE}).}

\item{as_bar}{If \code{as_fraction = TRUE}, \code{as_bar} is a logical value that defines whether or not to style fractions with a horizontal bar (i.e., \eqn{\frac{a}{b}}) or a slash (i.e., \eqn{a/b}).}

\item{...}{Additional arguments passed to \code{\link[prettyGraphics]{add_lagging_point_zero}} if \code{as_fraction = FALSE}.}
}
\value{
The function returns an \code{\link[base]{expression}} object.
}
\description{
This function re-expresses a vector of numbers in terms of \eqn{\pi}, returning an \code{\link[base]{expression}} object that can be added to a plot.
}
\details{
The function is designed to be used on a regular sequence of numbers (e.g., representing the tick marks on a plot) within \code{\link[prettyGraphics]{pretty_plot}}.
}
\examples{
#### Example (1): Implement the function in isolation
x <- seq(0, 8, by = 0.25*pi)/pi
pi_notation(x)
pi_notation(x, as_bar = FALSE)
pi_notation(x, as_fraction = FALSE)

#### Example (2): Plotting with fractions
## Stacked fraction
xlabels <- pi_notation(x, as_fraction = TRUE)
plot(x, rep(0, length(x)), axes = FALSE)
axis(side = 1, at = x*pi, labels = xlabels, col = "red")
## Spread fraction
x_axis <- pi_notation(x, as_fraction = TRUE, as_bar = FALSE)
plot(x, rep(0, length(x)), axes = FALSE)
axis(side = 1, at = x*pi, labels = xlabels, col = "red")

#### Example (3): Plotting with decimals
x_axis <- pi_notation(1:3, as_fraction = FALSE)
plot(x, rep(0, length(x)), axes = FALSE)
axis(side = 1, at = x*pi, labels = xlabels, col = "red")

#### Example (4): pi_notation() is implemented automatically in prettyGraphics
# ... via pretty_axis(), pretty_plot() etc.

## Define example time series of lunar phase in radians
dat <- data.frame(date = seq.Date(as.Date("2016-01-01"), as.Date("2016-02-01"), by = 1))
dat$lunar <- lunar::lunar.phase(dat$date)

## Visualise lunar phase time series, with pi_notation
pretty_plot(dat$date, dat$lunar,
            pretty_axis_args = list(pi_notation = list(NULL, list()))
            )
add_moons(side = 2, position = min(dat$date), radius = 0.5)

## Customise pi_notation
# Use as_bar = FALSE
pretty_plot(dat$date, dat$lunar,
            pretty_axis_args = list(pi_notation = list(NULL, list(as_bar = FALSE)))
            )
add_moons(side = 2, position = min(dat$date), radius = 0.5)
# Use decimals
pretty_plot(dat$date, dat$lunar,
            pretty_axis_args = list(pi_notation = list(NULL, list(as_fraction = FALSE)))
            )
add_moons(side = 2, position = min(dat$date), radius = 0.5)

## Use pi_notation within specified axis limits
pretty_plot(dat$date, dat$lunar,
            ylim = c(0, 2*pi),
            pretty_axis_args = list(pi_notation = list(NULL, list()))
            )
add_moons(side = 2, position = min(dat$date), radius = 0.5)

}
\seealso{
\code{\link[prettyGraphics]{pretty_axis}} (and subsidiary plotting functions, such as \code{\link[prettyGraphics]{pretty_plot}}) can implement this function internally.
}
\author{
Edward Lavender
}
