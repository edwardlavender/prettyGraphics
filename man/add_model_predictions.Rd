% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_model_predictions.R
\name{add_model_predictions}
\alias{add_model_predictions}
\title{Add model predictions (including fitted values and confidence intervals) to a plot}
\usage{
add_model_predictions(
  x,
  CI = list(),
  fCI = "poly",
  CI_gp = list(col = scales::alpha("lightgrey", 0.8), border = FALSE),
  add_fitted = TRUE,
  fitted_gp = list(col = "black", lwd = 1, lty = 1)
)
}
\arguments{
\item{x}{A numeric vector defining the x values at which fitted values/CIs will be plotted.}

\item{CI}{A named list with fitted values (optional) and lower and upper CIs (i.e. \code{CI$fit}, \code{CI$lowerCI}, \code{CI$upperCI}). This can be created by \code{\link[prettyGraphics]{list_CIs}}.}

\item{fCI}{A character defining the method by which CIs will be added to a plot: as lines (\code{"lines"}) or as a shaded polygon (\code{"poly"}). For large datasets, \code{fCI = "lines"} is much faster.}

\item{CI_gp}{A named list of graphical parameters for CIs. If \code{fCI = "lines"}, then two nested lists can be included to specify the lower and upper CI lines differently, if desired (see Examples).}

\item{add_fitted}{A logical input defining whether or not add the fitted line.}

\item{fitted_gp}{A named list of graphical parameters for the fitted line (passed to \code{\link[graphics]{lines}}).}
}
\value{
The function adds model predictions to a plot.
}
\description{
This function adds model predictions to a plot. This function is designed to streamline plotting codes. Model confidence intervals can be added as a polygon or as lines (with or without the fitted line added ontop). For large datasets, adding confidence intervals with lines is much faster.
}
\details{
The function is designed for continuous explanatory variables (i.e., adding regression lines and CIs to a plot). See \code{\link[prettyGraphics]{add_error_bars}} for discrete explanatory variables.
}
\examples{
# Define some data for a model
set.seed(1)
x <- runif(100, 0, 100)
y <- rnorm(100, 0.5*x - 50, 100)
# Define model
m1 <- lm(y ~ x)
# Define predictions
xp <-  seq(0, 100, by = 10)
p <- predict(m1, newdata = data.frame(x = xp), se.fit = TRUE)
# List CIs
CIs <- list_CIs(pred = p, plot_suggestions = FALSE)
# Visualise
plot(x, y)

#### Example (1):
# Add predicted CIs as a polygon and add fitted line ontop using default graphical parameters
# Note that fCI = "poly", and add_fitted = TRUE do not need to be supplied
# ... since these are the default options
add_model_predictions(x = xp, CI = CIs)

#### Example (2):
# Add predicted CIs as a polygon and add fitted lines with user-specified parameters
plot(x, y)
add_model_predictions(x = xp,
                      CI = CIs,
                      CI_gp = list(col = scales::alpha("skyblue", 0.8), border = FALSE),
                      fitted_gp = list(col = "blue", lwd = 3, lty = 1)
                      )

#### Example (3):
# Add predicted CIs as lines, where both upper and lower CIs have identical graphical parameters
plot(x, y)
add_model_predictions(x = xp,
                      CI = CIs,
                      fCI = "lines",
                      CI_gp = list(col = "red")
                      )

#### Example (4):
# Control lower and upper CI lines independently in a nested list
# The first element is the lower CI; the second element is the upper CI
plot(x, y)
add_model_predictions(x = xp,
                      CI = CIs,
                      fCI = "lines",
                      CI_gp = list(list(col = "red"), list(col = "blue"))
                      )

}
\author{
Edward Lavender
}
